# shellcheck shell=bash
# -*- mode: sh; -*-
# vi: set ft=sh :

[[ "${IS_OSX}" == true ]] && alias ls='gls'

alias ..='cd ..'
alias .2='cd ../..'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'
alias b='btop'
alias curldump='curl --trace -'
alias delpyc='find . -name '\*.pyc' -ls -exec rm {} \;'
alias dps='docker ps'
alias du='du -h -c'
alias du1='du -h --max-depth=1'
alias h='history | ${GREPPAGE} -i'
alias kcC='keychain --clear'  # safely decache keychain keys
alias killnode='killall -KILL node'
alias ksrv='killall -KILL node && kill-port 3000 && kill-port 8000'
alias l='ls -halG --color'
alias lift='sudo $(history -p \!\!)'  # sudo previous command
alias myip='curl --silent http://tnx.nl/ip; printf "\n"'
alias mv='mv -iv'
alias n='ncmpcpp'
alias np='mpc toggle'
alias p='ipython'
alias pmg='cd $(gh) && ./manage.py migrate'
alias psh='pipenv shell'
alias pt='py.test'
alias pts='py.test -s'
alias qp='ping -c 5 8.8.8.8'
alias rds='cd $(gh) && ./manage.py runserver_plus --configuration=Dev'
alias rdsql='cd $(gh) && ./manage.py runserver_plus --print-sql --configuration=Dev'
alias reload='source ${HOME}/.bash_profile'
alias rs='cd $(gh) && ./manage.py runserver'
alias tree='tree -I "node_modules|.git|.venv"'
alias yt='yarn test'

alias v='${VISUAL}'
alias vf='f -e ${VISUAL}'  # Quick open with fasd + vim.
alias vv='${EDITOR} ${HOME}/.vimrc'
alias suv='sudo ${VISUAL}'

[[ "${IS_LINUX}" == true ]] && {
  alias exm='ec ${HOME}/.xmonad/xmonad.hs'
  alias rmorph='pacman -Rsn $(pacman -Qqtd)' # Remove orphan packages on arch
  alias shclr='msgcat --color=test'
  alias shred='shred -zuv'
  alias sue='sudo emacs -nw'
  alias tv1='xset s off && xset -dpms && echo "screen powersaving off..."'
  alias tv0='xset s default && xset +dpms && echo "screen powersaving on..."'
  alias x='startx'
}

[[ "${IS_OSX}" == true ]] && {
  alias shred='gshred -zuv'
  alias su='sudo su -'
  alias pg='psql -h localhost -d postgres'
}

# Usage: cp-p $SOURCE $DESTINATION
# Copy with progress info.
cp-p() {
  rsync -WavP --human-readable --progress "$1" "$2";
}
alias cp='cp-p'

# Usage dsh $CONTAINER
# Shell into a docker container.
dsh() {
 docker exec -it "${1}" sh
}

# Usage dcx $CONTAINER $COMMAND
# Execute a command in a container.
dcx() {
  docker-compose exec -T "$1" "$2"
}

# Usage: err "Unable to do_something"
# Stderr helper function.
err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2;
  # exit 1
}

extract() {
  if [[ -f "${1}" ]]; then
    case "${1}" in
      *.tar.bz2)   tar xvjf "${1}"     ;;
      *.tar.gz)    tar xvzf "${1}"     ;;
      *.bz2)       bunzip2 "${1}"      ;;
      *.rar)       unrar x "${1}"      ;;
      *.gz)        gunzip "${1}"       ;;
      *.tar)       tar xvf "${1}"      ;;
      *.tbz2)      tar xvjf "${1}"     ;;
      *.tgz)       tar xvzf "${1}"     ;;
      *.zip)       unzip "${1}"        ;;
      *.Z)         uncompress "${1}"   ;;
      *.7z)        7z x "${1}"         ;;
      *)           echo "${1} cannot be extracted via >extract<" ;;
    esac
  else
    err "Error: ${1} is not a valid file"
  fi
}

# TODO: Consider using '*/\.*'
fd() {
  find . \
    -not -iwholename '*.git*' \
    -not -iwholename '*node_modules*' \
    -not -iwholename '*venv*' \
    -not -name '*.pyc' \
    -type d -iname "*""$*""*";
}

ff() {
  find . \
    -not -iwholename '*.git*' \
    -not -iwholename '*node_modules*' \
    -not -iwholename '*venv*' \
    -not -iwholename '*.tox*' \
    -not -iwholename '*.mypy_cache*' \
    -not -name '*.pyc' \
    -type f -iname "*""$*""*";
}

# Usage: fx FILE-SPECIFIER COMMAND
# Execute a command over the results of a call to `find'.
fx() {
  find . \
    -not -iwholename '*.git*' \
    -not -iwholename '*node_modules*' \
    -not -iwholename '*venv*' \
    -not -name '*.pyc' \
    -type f -iname "*""${1:-}""*" \
    -exec "${2:-file}" {} \; ;
}

# Usage: frep REGEX FILE-SPECIFIER
# Grep for patterns within the results of a call to `find'.
frep() {
  find . \
    -not -iwholename '*.git*' \
    -not -iwholename '*node_modules*' \
    -not -iwholename '*venv*' \
    -not -name '*.pyc' \
    -name "${2}" -print0 \
    | xargs -0 "${GREPPAGE}" --pretty -i "${1}" \
    | less;
}

# Usage: vrep REGEX FILE-SPECIFIER
# Grep for patterns and open matches for editing.
vrep() {
  ${GREPPAGE} -il "$@" | while IFS='' read -r line
  do
   xargs -o "${VISUAL}" "${line}"
  done
}

fwc() {
  find . -name "*.${1}" -print0 \
    | xargs -0 wc -l;
}

grep-less() {
  if command -v 'rg' >/dev/null 2>&1; then
    "${GREPPAGE}" --pretty -i "$@" | ${PAGER}
  else
    "${GREPPAGE}" --color -ir "$@" | ${PAGER}
  fi
}
alias g='grep-less'

grep-todo() {
  grep-less "todo" .
}
alias todo='grep-todo'

# Usage: kill-port $PORT
kill-port() {
  lsof -t -i tcp:"$1" | xargs kill -9
}

# Usage: pskill $PID
pskill() {
  local pid
  pid=$(pgrep -f "$1")
  printf "Killing: %s\\n" "$pid"
  kill -9 "$pid"
}

routerip() {
  netstat -nr \
    | awk '$1 == "0.0.0.0" {print $2}';
}

# Usage: shellcheck-add-shebang $SHELL $FILE
shellcheck-add-shebang() {
  if command -v 'gsed' >/dev/null 2>&1; then
    sed -i "1s/^/# shellcheck shell=$1\\n" "$2"
  else
    echo 'Install gnu-sed!' >&2
  fi
}

[[ "${IS_LINUX}" == true ]] &&
  sreboot() {
      if [[ "t" == "$(server_ok)" ]]; then
        echo "Shutting down the emacs server..."
        emacsclient -e '(client-save-kill-emacs)'
      fi
      echo "Shutting down MPD..."
      mpd --kill
      sudo shutdown -r now
  }

# Usage: generate-timestamped-ssh-key DOMAIN
ssh-generate-timestamped-key() {
  if [[ -n $1 ]]; then
    local timestamp ssh_host
    timestamp="$(date -u +"%Y%m%dT%H%M%Z")"
    # comment="$(whoami)@$(hostname)-$timestamp-rsa"
    ssh_host="$(whoami)@$(hostname)--$1-$timestamp-rsa"
    ssh-keygen -f "${HOME}/.ssh/$ssh_host"
  else
    err "Please provide the ssh server's domain name"
  fi
}

venv() {
  if [[ -d "./venv" ]]; then
    source ./venv/bin/activate
  else
    py -m venv venv && . venv/bin/activate
  fi
}

# TODO: Refactor to use native plugin mechanism.
# Usage: vim-add-plugin "http://some.url/to/a/git/repo"
vim-add-plugin() {
  git -C "${HOME}/.vim/bundle" submodule add "$@";
}

# TODO: Refactor to use native plugin mechanism.
vim-update-plugins() {
  git -C "${HOME}/.vim/bundle" submodule update --init --recursive;
}

vim-remove-plugin() {
  echo 'Not implemented!' >&2
}

vim-is-running() {
  local proc
  proc=$(tty | sed -e "s:/dev/::")
  ps \
    | "${GREPPAGE}" vim \
    | "${GREPPAGE}" -v rg \
    | "${GREPPAGE}" "$proc";
}
alias iv='vim-is-running'
