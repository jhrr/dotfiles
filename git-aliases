# shellcheck shell=bash
# -*- mode: sh; -*-
# vi: set ft=sh :

# git rev-parse --show-toplevel
# git rev-parse --is-inside-git-dir
# git rev-parse --is-inside-work-tree
# git rev-parse --short=0 HEAD
# git symbolic-ref --short HEAD || git rev-parse --abbrev-ref HEAD
# git log --left-right --graph --cherry-pick --oneline @{u}..

alias t='tig'

# Git alias shell-completion.
__define_git_completion() {
  eval "
    _git_$2_shortcut() {
      COMP_LINE=\"git $2\${COMP_LINE#$1}\"
      let COMP_POINT+=$((4+${#2}-${#1}))
      COMP_WORDS=(git $2 \"\${COMP_WORDS[@]:1}\")
      let COMP_CWORD+=1

      local cur words cword prev
      _get_comp_words_by_ref -n =: cur words cword prev
      _git_$2
    }
  "
}

__git_shortcut() {
  local shortcut="$1"
  type "_git_$2_shortcut" &>/dev/null || __define_git_completion "$1" "$2"
  eval "function ${shortcut} { git $2 $3; }"
  complete -o default -o nospace -F "_git_$2_shortcut" "$1"
}

# Quote block of arguments if it contains spaces or expansions.
__git_shortcut  ga  add '"$@"'
__git_shortcut  gA  add '--all && git status'
__git_shortcut  gb  branch '--color -v'
__git_shortcut  gbv  branch '--color -v | cut -c1-200'
__git_shortcut  gbr  branch '"$@"'
__git_shortcut  gc  commit '-v -m "$@"'
__git_shortcut  gco  checkout '"$@"'
__git_shortcut  gcoA  checkout '-- .'
__git_shortcut  gcoB  checkout '-b "$@"'
__git_shortcut  gd  diff '"$@"'
__git_shortcut  gdc  diff --cached
__git_shortcut  gdo  diff 'origin/$(git rev-parse --abbrev-ref HEAD)'
__git_shortcut  gF  fetch --all
__git_shortcut  gh  rev-parse --show-toplevel  # Usage: cd $(gh)
__git_shortcut  gPo  push 'origin $(git rev-parse --abbrev-ref HEAD)'
__git_shortcut  gPoF  push 'origin -f $(git rev-parse --abbrev-ref HEAD)'
__git_shortcut  gPu push 'upstream $(git rev-parse --abbrev-ref HEAD)'
__git_shortcut  gPuF push 'upstream -f $(git rev-parse --abbrev-ref HEAD)'
__git_shortcut  gpL  pull '--ff-only origin $(git rev-parse --abbrev-ref HEAD)'
__git_shortcut  gpLR  pull --rebase
__git_shortcut  gpLom  pull '--ff-only origin master'
__git_shortcut  gpLum  pull '--ff-only upstream master'
__git_shortcut  grHob  reset '--hard origin/$(git rev-parse --abbrev-ref HEAD)'
__git_shortcut  grHom  reset '--hard origin/master'
__git_shortcut  gRi  rebase -i '"$@"'
__git_shortcut  gRiom  rebase '-i origin/master'
__git_shortcut  gRom  rebase 'origin/master'
__git_shortcut  gRum  rebase 'upstream/master'
__git_shortcut  grm  commit '-F .git/MERGE_MSG'
__git_shortcut  gsh  show '"$@"'
__git_shortcut  gst  status

alias .g='cd $(gh)'  # Jump to repo root.

_format="%C(bold red)%h%C(reset)%C(blue) %cn"
_format+="%C(yellow)%d%C(reset) %s %C(red)(%cr) "

# Usage: gl
gl() {
  git log --graph --pretty=format:"${_format}" --abbrev-commit
}

# Usage: git-in-repo
# Test if we are currently under version control with git.
git-in-repo() {
  local _repo
  _repo=$(basename "${PWD}")
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    err "Error: ${_repo} is not a git repository."
    return 1
  else
    return 0
  fi
}

# Usage: git-commit-for-squash
git-commit-for-squash() {
  git-in-repo && \
    git commit -v -m 'squash!';
}
alias gcS='git-commit-for-squash'

# Usage: git-commit-all-for-squash
# Make a commit for a projected squashing. Useful is --autosquash or:
# $ git config --global rebase.autosquash true
git-commit-all-for-squash() {
  git-in-repo && \
    git add . && \
    git commit -v -m 'squash!';
}
alias gcAS='git-commit-all-for-squash'
alias kwatz='git-commit-all-for-squash'
alias mu='git-commit-all-for-squash && git rebase -i HEAD~2'

# Usage: git-commit-all-uuid
#Â Fast commits for gists and such like when you don't want to write a
# meaningful commit message but "kjhasdfd" is getting annoying.
git-commit-all-uuid() {
  git-in-repo && \
    git add . && \
    git commit -v -m "$(uuidgen)";
}
alias gcAU='git-commit-all-uuid'

# Usage: git-conflict-cherry-pick $PARENT_BRANCH $HASH
# Apply a $HASH to the HEAD of the current branch after making it a
# clone of the supplied $PARENT_BRANCH.
git-conflict-cherry-pick() {
  git-in-repo && \
    if [[ "$#" -ne 2 ]]; then
      err "Usage: git-conflict-cherry-pick \$PARENT_BRANCH \$HASH"
    else
      git reset --hard "$1" && git cherry-pick "$2"
    fi
}

# Usage: github-create-repo $USER $NAME
# Create a bare git-repo on a github account. You will be prompted for your
# password. Can also be achieved using `hub create', should you have hub.
github-create-repo() {
  curl -u "$1" https://api.github.com/user/repos -d '{"name":"'"$2"'"}'
}

# Usage: git-grep-replace $TARGET $NEW
# Replace a $TARGET string with a $NEW string repo-wide.
git-grep-replace() {
  git-in-repo && \
    git grep --full-name --files-with-matches "$1" \
      | xargs sed --in-place -e "s/$1/$2/";
}

# Usage: git-minimum-hash
# Print the entire SHA1 commit hash of the current HEAD with the
# minimum hash highlighted.
git-minimum-hash() {
  git-in-repo && \
    git rev-parse HEAD \
      | GREP_COLORS='ms=34;1' $GREPPAGE "$(git rev-parse --short=0 HEAD)";
}

# Usage: git-nuke-branch $BRANCH
git-nuke-branch() {
  git-in-repo && \
    git push origin --delete "$1" && git branch -D "$1"
}

# Usage: git-purge-local
# Delete all local tracking branches except master.
git-purge-local() {
  git-in-repo && \
    git branch \
      | grep -v 'master' \
      | xargs git branch -D
}

# Usage: git-purge-local-merged
# Delete all local tracking branches except master that have been
# merged upstream.
git-purge-local-merged() {
  git-in-repo && \
    git branch --merged \
      | grep -v 'master' \
      | tr -d '\n' \
      | xargs git branch -D
}

# Usage: git-resolve-merge
# Open files with merge conflicts sequentially using $EDITOR.
git-resolve-merge() {
  "${EDITOR}" "$(git diff --name-only | uniq)";
}
alias grsv='git-resolve-merge'

# Usage: git-edit-changes
# Load all files with diffs into $EDITOR.
git-edit-changed() {
  "${EDITOR}" "$(git status --porcelain | gawk '{print $2}')"
}
alias vedf='git-edit-changed'

# Usage: git-squash-x $INTEGER
# Interactive rebase an $INTEGER's worth of commits backwards in the commit
# history. If $INTEGER is not provided then default to 1 commit behind HEAD.
git-squash-x() {
  git-in-repo && \
    if [[ $1 =~ ^-?[0-9]+$ ]]; then
      git rebase -i HEAD~"$1"
    else
      if [[ $# -eq 0 ]]; then
        git rebase -i HEAD~2
      else
        err "Pass in a number of commits behind to constrain the rebase..."
      fi
    fi
}
alias gsx='git-squash-x'

# Usage: git-sync-branch
git-sync-branch() {
  local _remote _branch _branches
  _remote='origin'
  _branch="$(git rev-parse --abbrev-ref HEAD)"
  git-in-repo && \
    git fetch --all && \
    git pull --ff-only "${_remote}" "${_branch}"
}
alias gSB='git-sync-branch'

# Usage: git-sync-fork $REMOTE $BRANCH
git-sync-fork() {
  git-in-repo && \
    git fetch --all && \
    if [[ $# -eq 0 ]]; then
      local _remote
      _remote='upstream'
      git pull --ff-only "${_remote}" "$(git rev-parse --abbrev-ref HEAD)"
    elif [[ $# -eq 1 ]]; then
      git pull --ff-only "$1" "$(git rev-parse --abbrev-ref HEAD)"
    elif [[ $# -eq 2 ]]; then
      git pull --ff-only "$1" "$2"
    else
      err "Too many arguments..."
    fi
}
alias gSF='git-sync-fork'

# Usage: git-todo
git-todo() {
  git-in-repo && \
    git grep -n -e TODO -e FIXME -e XXX
}

# Usage: git-edit-modified
git-edit-modified() {
  # shellcheck disable=SC2046
  git-in-repo && \
    "${VISUAL}" $(git ls-files -o -m --exclude-standard)
}
alias va='git-edit-modified'

# Usage: git-list-diff $HASH
# List all files contained in a commit.
git-list-diff() {
  git-in-repo && \
    git diff-tree --no-commit-id --name-only -r "$1"
}

# # Usage: git-list-dangling
# Show unreachable commits. Useful if you ever pop an uncommitted stash in the
# wrong place and everything becomes inconsistent, for example.
git-list-dangling() {
  git-in-repo && \
    git fsck --no-reflog \
    | awk '/dangling commit/ {print $3}' \
    | cut -d " " -f3 \
    | xargs git log --merges --no-walk
}

# Usage: git-restore-files $SHA $FILENAME_1 $FILENAME_N
# Pull files into HEAD from a specified commit.
git-restore-files() {
  git-in-repo && \
    git restore -s "${1}" -- "${@:2}"
}
